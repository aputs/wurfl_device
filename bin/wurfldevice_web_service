#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.expand_path('../lib', File.dirname(__FILE__)))

require 'optparse'

$server_host = '0.0.0.0'
$server_port = 8090
$state_dir = File.join(ENV['HOME'], 'var', 'run')
$log_dir = File.join(ENV['HOME'], 'log')

args = OptionParser.new do |opts|
  opts.separator ""
  opts.on("-o", "--host=HOST", "listen on HOST (default: #{$server_host})") do |t|
    $server_host = t
  end
  opts.on("-p", "--port=PORT", "set port to PORT (default: #{$server_port})") do |t|
    $server_port = t
  end
  opts.on("-d", "--data=DIR", "set data dir to DIR (default: #{$state_dir})") do |t|
    $state_dir = t
  end
  opts.on("-l", "--log=DIR", "set log dir to DIR (default: #{$log_dir})") do |t|
    $log_dir = t
  end
  opts.separator ""
end

args.parse!

ENV['RACK_ENV'] ||= 'production'

require 'json'
require 'dalli'
require 'rack/cache'
require 'sinatra/base'
require 'wurfl_device'

class WebService < Sinatra::Base

  use Rack::Cache,
    :verbose     => true,
    :metastore   => 'memcached://localhost:11211/cache-meta',
    :entitystore => 'memcached://localhost:11211/cache-entity',
    :cache_key   => lambda { |request| request.user_agent }

  PUBLIC_DIR = File.expand_path('../public', File.dirname(__FILE__))

  configure {
    set :root, PUBLIC_DIR
    set :static, PUBLIC_DIR
    set :server, :puma
    set :bind, $server_host
    set :port, $server_port
    enable :logging
  }

  before do
    cache_control :public, :must_revalidate, :max_age => 60
  end

  # preload wurfl device lookup tables
  WurflDevice::Cache::HandsetsList.handsets_and_user_agents
  WurflDevice::Cache::CapabilityList.capabilities
  WurflDevice::Cache::UserAgentsMatchers.user_agent_matchers.map { |m| WurflDevice::Cache::UserAgentsMatchers.user_agents_for_brand(m) }

  get '/' do
    [200, {"Content-Type" => "application/json"}, [WurflDevice.handset_from_user_agent(request.user_agent).full_capabilities.to_json]]
  end

  error 404 do
    @app.call(env)
  end

  run! if app_file == $0

end